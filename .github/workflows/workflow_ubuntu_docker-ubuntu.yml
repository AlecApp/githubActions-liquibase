# This is a basic workflow to help you get started with Actions

name: Liquibase_Docker_GitHub-Hosted

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  LBJobDockerCLI:
    runs-on: ubuntu-latest
    container:
      image: liquibase/liquibase
    steps: 
    # Runs a set of commands using the runners shell 
    - uses: actions/checkout@v2
    - name: What OS is running
      run: uname -a
    - name: What java version do we have
      run: java -version
    - name: Run Liquibase commands
      run: |
        liquibase/liquibase --version 
        liquibase/liquibase --url="jdbc:h2:mem:liquibase" --changeLogFile=./Docker/changeLog.h2.sql --username=liquibase --password=password status --verbose
        liquibase/liquibase --url="jdbc:h2:mem:liquibase" --changeLogFile=./Docker/changeLog.h2.sql --username=liquibase --password=password updateSQL
        liquibase/liquibase --url="jdbc:h2:mem:liquibase" --changeLogFile=./Docker/changeLog.h2.sql --username=liquibase --password=password update
        liquibase/liquibase --url="jdbc:h2:file:./Docker/h2tutorial" --changeLogFile=./Docker/changeLog.h2.sql --username=liquibase --password=password update
        

        #The Liquibase commands above are running in-memory H2 database.  To run a and save a local copy of a H2 database, do the following:
        #1. change the url flag to point to a local copy of the H2 database: --url=jdbc:h2:file:./Docker/h2tutorial
        #2. Save the files in the repo like the following:
        #Uncomment the line below to save changes.  Also, see environment variables under "env" and assign variables accordingly
    
  LBJobSaveChanges:
    needs: LBJobDockerCLI
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - name: Checkout
      run: git config --global user.email $user.email; git config --global user.name $user.name; git config pull.rebase false; git add .; git commit -m $"message"; git push -u origin $branch
      env:
        user.email: "szandany@liquibase.com"
        user.name: "szandany"
        message: "saving changes"
        branch: "main"
